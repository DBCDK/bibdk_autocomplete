<?php
/**
 * @file
 * Code for Bibliotek.dk Autocomplete
 */

/**
 * Implements hook_menu().
 */
function bibdk_autocomplete_ui_menu() {

  $items['admin/config/search/bibdk_autocomplete_ui'] = array(
    'title' => 'Bibliotek.dk UI autocomplete settings',
    'description' => 'Settings for bibliotek.dk autocomplete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_autocomplete_ui_settings_form'),
    'access arguments' => array('administer search'),
    'file' => 'bibdk_autocomplete_ui.admin.inc',
  );

  $items['bibdk/autocomplete/%/%'] = array(
    'title' => 'Bibliotek.dk autocomplete',
    'description' => 'Autocomplete callback',
    'page callback' => 'bibdk_autocomplete_ui_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'file' => 'bibdk_autocomplete_ui.pages.inc',
    'type' => MENU_CALLBACK,

  );

  $items['bibdk/behaviour/autocomplete'] = array(
    'title' => 'Bibliotek.dk autocomplete behaviour',
    'description' => 'Autocomplete behaviour callback',
    'page callback' => 'bibdk_autocomplete_ui_behaviour_callback',
    'access arguments' => array('access content'),
    'file' => 'bibdk_autocomplete_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for form search_block_form.
 */
function bibdk_autocomplete_ui_form_search_block_form_alter(&$form, &$form_state, $form_id) {

  if (!empty($form['page_id']['#value'])) {
    $page_path = $form['page_id']['#value'];
  } else {
    if ($_GET['q']['page_id ']) {
      $page_path = $_GET['q']['page_id '];
    } else {
      $page_path = $_GET['q'];
    }
  }

  $autocomplete_elements = variable_get('bibdk_autocomplete_ui_var', array());

  foreach ($autocomplete_elements as $key => $page) {
    if ($page['page_path'] == $page_path) {
      $vars = $page['vars'];
      $p_uuid = $key;
    }
  }

  if (!empty($vars)) {
    foreach ($vars as $v_uuid => $values) {
      if ($v_uuid == 'search_block_form' && $values['autocomplete'] == TRUE) {
        $form['search_block_form']['#autocomplete_path'] =
          'bibdk/autocomplete/' . $p_uuid . '/search_block_form';
      }
      if (!empty($form['advanced']) && !empty($form['advanced']['main'])) {
        foreach ($form['advanced']['main'] as $element_label => $elements) {
          bibdk_autocomplete_ui_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'main');
        }
      }
      if (!empty($form['advanced']) && !empty($form['advanced']['expand'])) {
        foreach ($form['advanced']['expand'] as $element_label => $elements) {
          bibdk_autocomplete_ui_set_path($form, $elements, $element_label, $values, $p_uuid, $v_uuid, 'expand');
        }
      }
    }
    // Add base autocomplete JS.
    $form['#attached']['js'][] = drupal_get_path('module', 'bibdk_autocomplete_ui') . '/js/bibdk_autocomplete_ui.js';
    // Add overrides to Drupal Core autocomplete feature.
    $form['#attached']['js'][] = drupal_get_path('module', 'bibdk_autocomplete_ui') . '/js/bibdk_autocomplete_ui.overrides.js';
  }

}


/**
 * helper function for hook_form_FORM_ID_alter()
 */
function bibdk_autocomplete_ui_set_path(&$form, $elements, $element_label, $values, $p_uuid, $v_uuid, $region = 'main') {
  if (is_array($elements)) {
    foreach ($elements as $element_uuid => $element_val) {
      foreach ($element_val as $element_key => $element_var) {
        if (is_array($element_var) && isset($element_var['#id']) && $element_var['#id'] == $values['id'] && $values['autocomplete']) {
          $form['advanced'][$region][$element_label][$element_uuid][$element_key]['#autocomplete_path'] = 'bibdk/autocomplete/' . $p_uuid . '/' . $v_uuid;
        }
      }
    }
  }
}

/**
 * Implements hook_0_hit().
 * @return array
 *
 */
function bibdk_autocomplete_ui_0_hit($string) {
  $matches = array();
  $query['q'] = strtolower($string);

  $settings = variable_get('bibdk_autocomplete_ui_settings', array());
  $query = array_merge($query, $settings);

  $vars = variable_get('bibdk_autocomplete_ui_var', array());
  $query['type'] = 'all';

  // Try to use cache for the query.
  $cid = md5(serialize($query));
  if ($cache = cache_get($cid, 'cache_bibdk_autocomplete')) {
    $matches = $cache->data;
  }
  else {
    $suggestions = bibdk_autocomplete_get_suggestions($query);
    // Maximum space in suggestions dropdown is 64 characters.
    // Maximum characters for search query string is 256 characters.
    foreach ($suggestions as $suggestion) {
      $val = truncate_utf8($suggestion, 64, TRUE, TRUE, 1);
      $key = truncate_utf8($suggestion, 256, TRUE, FALSE, 1);
      $key = trim($key, " \t\n\r\0\x0B?"); // trim whitespace and question mark.
      if (strpos($suggestion, ' ')) {
        $key = '"' . str_replace('"', '\"', $key) . '"';
      }
      $matches[$key] = $val;
    }

    // Store the matches in cache for faster lookup next time.
    if (sizeof($matches) > 0) {
      cache_set($cid, $matches, 'cache_bibdk_autocomplete', CACHE_TEMPORARY);
    }
  }

  $link_items = bibdk_autocomplete_ui_make_item_list($matches);

  return $link_items;
}


/**
 * helper function for 0_hit_search()
 */
function bibdk_autocomplete_ui_make_item_list($items) {

  $links = array();

  // make a list of suggesttions
  foreach ($items as $suggest) {
    $zero_hit_link = array(
      '#theme' => 'link',
      '#path' => 'search/work/' . '"' . $suggest . '"',
      '#weight' => 0,
      '#text' => $suggest,
      '#options' => array(
        'attributes' => array(
          'class' => array(
            'bibdk-suggest-link',
          ),
        ),
        'html' => false,
      ),
    );
    $links[] = drupal_render($zero_hit_link);
  }

  // label for suggestions
  $render['label'] = array(
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#value' => t('label_did_you_mean', array(), array('context' => 'bibdk_autocomplete_suggest')),
    '#attributes' => array(
      'class' => array('bibdk-suggest-label'),
    ),
  );

  // render array for suggestions
  $render['suggest_list'] = array(
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#attributes' => array(
      'class' => array('links'),
      'class' => array('bibdk-suggest-links'),
    ),
    '#items' => $links,
  );

  return $render;

}
